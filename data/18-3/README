The program implements the RSA_OAEP cryptosystem using C++. Description of RSA-OAEP can be found on the lecture sildes. 

The are three functions: generate, encrypt and decrypt. Generate gives a public key and a private key. Encrypt encrypts the message with the chose key. Decrypt decrypt the message with the chose key. 

the correct syntax for encryting: 
./c2 --generate

the correct syntax for encryting: 
./c2 --encrypt "your_plaintext" --key "encryption_key"

the correct syntax for decrypting:
./c2 --encrypt "your_plaintext" --key "decryption_key"

Since the program is implemented with GMPLIB, please do not attempt to encrypt or decrypt plaintexts longer than 512 bits and ciphertexts longer that 2048 bits. The message must contain lower case letters only, and the cipher and key are digits only. No space is allowed. 

The messages are translated into numbers in the following way: each letter is changed into 1~26 for a~z, and takes up two digits in decimal form. For example, "abc" is 010203. 

Unlike the lecture slides, we do not deal with the length of the plaintexts l as their real length in binary, we set the l = 512 bits for all messages.  

In this challenge, the ciphertext is 17965749705992248852230028179143085083489016296459617781582545076657586875971597500879867247960495045179039086570903469073749181479793568018140215486220086266765377023081872214825459014658774250884212469232980758020813592812585952811461349937569664886316782867939598691791578712775450376170421014404881987384281169657129040217001478501576343410047079268938737865606382765262575294098529608543054753561608589388525535759185484082492005252841520141079206075694929293727431755794008207127228372179386003171058590008414911243621820462739417694615195048140286751561821307106902798393312952032088410162635053541304284544280; 

Encryption key used to encrypt this message is 51577433998453593589934024613731959179546871497507095689513561410170990895418794716414283373950756730573836303532730857284172349337154319877666112663639840519223768033281173606389209322094268103387172612339887339335271724134765366113042253961822242172337875005597708822342264723200581286522733253614186339519325009369966646760634847022319656033525234218917424259080802165742626511347243300821879936445373098066225313232890102114309991910049168791346081585685348568920223589638114502710206792005681938944536185292669790644606656824281469850814010188492882588282961888762844560362852874131003458193671798910935713164227; 

RSA modulous in this challenge is fixed to: 


This program is created by Yu Chengyun and Xu Haining, Enjoy!  

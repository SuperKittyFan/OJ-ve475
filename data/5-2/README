/======= A notice for the instruction team =======/
To release the source code, please kindly:

- For each cipher, remove the files
    - plaintext.txt, contains challenge plaintext
    - keyfile.txt, contains challenge key
- For specific cipher, remove files that embeds the key
    - secured_data_aes.cpp,
    - secured_data_rc6.cpp,

The src/ subfolder contains the total source code of the work,
along with the two plaintexts used in the two ciphers.

This folder is NOT supposed to be released. It is for code review only.

Thanks a lot!
==================================================

======== README ===========
This is the README file of the c2 of VE475.

AUTHORS: Yue Yao (@tripack45) patrickyao@sjtu.edu.cn
         SHUYANG HUANG (@kinghsy) shawn.shuyanghuang@gmail.com

Two ciphers share the same program, compiled yet with different compile-time
options, to select which cipher is the active cipher.

Two ciphers implemented are:

1. A modified version of AES (Rinjidale).
    - Textbook design. 128 bit key and block size, CBC mode.
2. RC6 cipher, another candidate of AES.
    - 128 bit key and block size. CBC mode. [4]
    - Key scheduling algrithm inherited from RC5. [5]

Both ciphers are 128bit block ciphers, with 128bit key length. The plaintext is
prepared as follows before sent to cipher program.

- Plaintext is first hashed using MD5 hash function [2][3].
    - The hash of plaintext is 128bit long.
    - It is prepended to plain text.
- Plaintext is then padded using PKCS7 padding algorithm [1].
- Key is translated to byte stream, and hashed with MD5.
    - The 128bit hashed key is used as IV.
- We sent the treated plain text along with key and IV to encryption algorithm

On decryption, we will
- Hash the key to acquire IV.
- Decrypt the cipher text.
- Remove the padding of the decrypted text.
- Calculate the MD5 hash of the plaintext (second block to end).
- Compare the hash with the tagged MD5 (first block).
    - If there is match, decryption is successful.
    - If they fail to match, decryption is uncessful. In this case an error
      message is attached.

=== Compiling the program.
In the source directory, a Makefile is provided to compile the program. The
program has 2 main compiling options, the debug mode, and the release version.

- To compile the debug program, do the following in any of the cipher program
    - Exectute 'make c2.debug'
    - This will generate two exectutable
        - c2aes : The aes cipher
        - c2rc6 : The rc6 cipher
    - Execute 'make c2.debug.sanitize' will compile the debug program with
      address sanitizer enabled (if you have Clang installed). This helps detect
      memory issues of your program.

- To compile the release program
    - cd into the directory of desired cihper directory.
    - Prepare your challenge plain text in 'plaintext.txt'
    - Execute 'make' or 'c2.xxx.release', where 'xxx' is one of 'aes' or 'rc6'.
        - The default key will be generated and put into 'keyfile.txt'
        - A cipher text of your chosen plain text will be put into 'ciphertext.txt'
        - An executable 'c2' will be generated. This executable contains a hidden
          default key, same as content of 'keyfile.txt', and will rejects user's
          attempt to decrypt 'ciphertext.txt' using the default key.
    - Note debug programs will also be generate during the process.

- Extra targets:
    - make submission: Automatically prepares submission package.
    - make c2.test.*: runs automatic tests

=== Using the program.
The release program allows the following options:
    --generate, -g : Generates a key.
    --decrypt, -d  : Decrypts a cipher text
    --encrypt, -d  : Encrypts a cipher text
    --key, -k      : Specifies a file containing the key. If ommited, the default
                     key will be used.

The debug program, on the other hands, supports a much wider range of options
    * All options supported by the release program, and in addition:
    --verbose, -v     : Prints extra debugging information to the screen.
    --algorithm, -a   : Explicitly selects the cipher to be used. Possible choices
                        are 'aes', 'rc6' and 'dummy'. The final one just for program
                        functional tests only. If this option is ommited, a default
                        cipher will be selected.
                        * 'c2aes' will default to '-a aes'
                        * 'c2rc6' will default to '-a rc6'
    --secure-data, -s : This option will generate a "secured_data" source file
                        for compiling the release version of the program. It
                        - Reads the challenge plain text from 'plaintext.txt'
                        - Generate a key and write it to 'keyfile.txt'
                        - Generates a "secured_data" source. The content is printed
                          on screen.

    This secure source file contains
    - A secret key to be embedded into release exectubble.
      This secret key is the default key.
    - A hash of challenge cipher text. This hash is to prevent the user from
      decrypting the challenge cipher text.

=== Point assignments:
    - 5pts for AES Cipher
    - 5pts for RC6 Cipher

=== References

[1] The PKCS7 padding algorithm, available from:
    https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7
[2] The reference implementation used in the program:
    http://www.zedwood.com/article/cpp-md5-function
[3] RFC1321 Standard: The MD5 Message digest algorithm.
    Note it contains a sample C implementaion, deriving to our implementation.
     https://www.ietf.org/rfc/rfc1321.txt
[4] RC6 manual
    https://people.csail.mit.edu/rivest/pubs/RRSY98.pdf
[5] RC5 manual, chapter 4.3
    http://people.csail.mit.edu/rivest/Rivest-rc5rev.pdf